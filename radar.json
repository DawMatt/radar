{
    "title": "Matt's Technology Radar",
    "quadrants": [
        "Practices & Techniques",
        "Tools",
        "Platforms",
        "Standards & Frameworks"
    ],
    "rings": [
        "adopt",
        "trial",
        "assess",
        "hold"
    ],
    "blips": [
        {
            "name": "Design First APIs",
            "quadrant": "Practices & Techniques",
            "ring": "trial",
            "isNew": true,
            "description": "APIs are created using a design-first approach. We 'start with why' of the API to understand its value and purpose before proceeding to technical details. This includes establishing the contract for the API before proceeding to detailed design and build.<br/><br/>Candidate techniques to support this practice:<br/><ul><li><a href=\"https://www.apiopscycles.com/method/api-canvas\">API Canvas</a></li><li>OpenAPI Contracts</li><ul>"
        },
        {
            "name": "Architectural Fitness Functions and Evolutionary Architecture",
            "quadrant": "Practices & Techniques",
            "ring": "assess",
            "isNew": true,
            "description": "<a href=\"https://www.thoughtworks.com/en-au/radar/techniques/architectural-fitness-function\">Architectural Fitness Functions</a><br /><br /> provides guard rails to ensure an architecture doesn't stray outside of the bounds the architecture is designed to support."
        },
        {
            "name": "Products, not Projects",
            "quadrant": "Practices & Techniques",
            "ring": "assess",
            "isNew": true,
            "description": "Hypothesis: greater ownership and engagement, and less short term thinking."
        },
        {
            "name": "Interface mocking",
            "quadrant": "Practices & Techniques",
            "ring": "trial",
            "isNew": true,
            "description": "Interface mocking presents an executable interface consumers without requiring the as-designed implementation to have completed. This can be used to support \"design first\" interfacing practices, simplify testing prior to Systems Integration Testing (SIT), and to effectively provide an additional integration environment with either stable or dynamic transactional data."
        },
        {
            "name": "Team Topology",
            "quadrant": "Practices & Techniques",
            "ring": "assess",
            "isNew": true,
            "description": "Team topologies represents a technique for deliberately designing teams and organisations to enhance delivery speed and safety. In particular am interested to understand how platform and stream aligned teams can be applied in an integration environment."
        },
        {
            "name": "Event Storming",
            "quadrant": "Practices & Techniques",
            "ring": "assess",
            "isNew": true,
            "description": "When organizations move toward microservices, one of the main drivers is the hope for faster time to market. However, this aspiration only tends to be realized when services (and their supporting teams) are cleanly sliced along long-lived business domain boundaries. Otherwise meaningful features will naturally require tight coordination between multiple teams and services, introducing natural friction in competing roadmap prioritization. The solution to this problem is good domain modeling, and event storming has rapidly become one of our favorite methods for rapidly identifying the key concepts in a problem space and aligning a variety of stakeholders in the best way to slice potential solutions."
        },
        {
            "name": "Domain Driven Design (DDD)",
            "quadrant": "Practices & Techniques",
            "ring": "trial",
            "isNew": true,
            "description": "Domain-Driven Design is an approach to software development that centers the development on programming a domain model that has a rich understanding of the processes and rules of a domain. The name comes from a 2003 book by Eric Evans that describes the approach through a catalog of patterns.<br/><br/>References: <a href=\"https://martinfowler.com/bliki/DomainDrivenDesign.html\">Martin Fowler</a>"
        },


        {
            "name": "Spectral",
            "quadrant": "Tools",
            "ring": "assess",
            "isNew": true,
            "description": "Static error- and style-checking tools often emerge after a new language gains popularity. These tools are generically known as linters â€” after the Unix lint utility which statically analyses C code. These tools catch errors early, before code even gets compiled, and can help keep code reviews focused on more significant topics than code styles and formatting. A recent instance of this pattern is <a href=\"https://stoplight.io/open-source/spectral/\">Spectral</a>, a linter for YAML and JSON. Although Spectral is a generic tool for these formats, its main target is OpenAPI and AsyncAPI. Spectral ships with a comprehensive set of out-of-the-box rules for these specs that can save developers headaches when designing and implementing APIs or event-driven collaboration. These rules check for proper API parameter specifications or the existence of a license statement in the spec, among other things.<br/><br/>Assessing Spectral's use in both the IDE (via Visual Studio and Visual Studio Code extensions) and in build pipelines. If adopted a custom ruleset would be published to reflect BlueScope's API Guidelines, making it easier for developers to align with current best practices in API development.<br/><br/>Source: ThoughtWorks, Various"
        },
        {
            "name": "Optic",
            "quadrant": "Tools",
            "ring": "assess",
            "isNew": true,
            "description": "<a href=\"https://github.com/opticdev/optic\">Optic</a> is a CI compatible OpenAPI evolution checking tool. Allows diffing versions of the same OpenAPI specification, and comparing the specification to requests and responses.<br/><br/>Source: <a href=\"https://www.apiscene.io/lifecycle/detecting-breaking-changes-across-api-versions/\">APIScene/Kin Lane</a>"
        },
        {
            "name": "Postman",
            "quadrant": "Tools",
            "ring": "trial",
            "isNew": false,
            "description": "Hypothesis: Can be used for design first APIs (assess - competing with Stoplight), mocking APIs, exploratory testing, and verifying compliance of implementation to specification. Supports GraphQL in addition to RESTful."
        },
        {
            "name": "Newman",
            "quadrant": "Tools",
            "ring": "trial",
            "isNew": true,
            "description": "Hypothesis: Extending Postman capabilities to the command line. Use for regression testing, contract testing, and from CI pipelines."
        },
        {
            "name": "Stoplight Studio",
            "quadrant": "Tools",
            "ring": "assess",
            "isNew": true,
            "description": "Hypothesis: Used for design first APIs. Can maintain and apply enterprise API standards. Some overlap with Postman functionality, but seems better suited for design first approach."
        },
        {
            "name": "Insomnia",
            "quadrant": "Tools",
            "ring": "hold",
            "isNew": true,
            "description": "Hypothesis: Aligned with Kong API Gateway. Less suited to use with other API Gateways."
        },
        {
            "name": "SwaggerHub",
            "quadrant": "Tools",
            "ring": "hold",
            "isNew": true,
            "description": "Hypothesis: High level of feature overlap with Postman. Use it instead."
        },
        {
            "name": "Rabbit MQ",
            "quadrant": "Tools",
            "ring": "assess",
            "isNew": false,
            "description": "Rabbit MQ is a message queueing product that has been used within the engineering space. It is being considered as a more affordable replacement for IBM MQ."
        },
        {
            "name": "IBM MQ",
            "quadrant": "Tools",
            "ring": "hold",
            "isNew": false,
            "description": "IBM's Message Queueing (MQ) product used for communications across a wide variety of operating systems, including mainframes."
        },
        {
            "name": "Azure Static Websites",
            "quadrant": "Tools",
            "ring": "assess",
            "isNew": true,
            "description": "Alternative simple, cheap way to deploy personal projects via BLOB storage."
        },
        {
            "name": "GitHub Actions",
            "quadrant": "Tools",
            "ring": "trial",
            "isNew": true,
            "description": "Simple way to add CI/CD capability to projects."
        },
        {
            "name": "Backstage",
            "quadrant": "Tools",
            "ring": "assess",
            "isNew": true,
            "description": "<a href=\"https://backstage.io/\">Backstage</a> is an OSS developer portal from Spotify. Used for applications not just APIs. Includes a plugin architecture with some interesting plugins (e.g. C4 diagram generators)."
        },
        {
            "name": "portman",
            "quadrant": "Tools",
            "ring": "assess",
            "isNew": true,
            "description": "<a href=\"https://getportman.com/\">Portman</a> is an OSS utility to 'Port OpenAPI Specs to Postman Collections, inject test suite and run via Newman'. Expected to be useful for contract and variation (fuzz) testing based upon OpenAPI specifications.<br/><br/>References: <a href=\"https://github.com/apideck-libraries/portman\">GitHub</a>, <a href=\"https://youtu.be/4qWkFfmJ6To\">APIDays Australia 2022 presentation video: Scale Your API teams with a Design-First Approach</a>"
        },
        {
            "name": "Integration Catalogue",
            "quadrant": "Tools",
            "ring": "assess",
            "isNew": true,
            "description": "An Integration Catalogue captures an inventory of all current and future system to system integrations. It supports the practice of Integration Governance by providing a means to capture and identify integrations, and record the outcome of any governance assessments. Also has potential as a source of data for visualising an integration topology."
        },

    
        {
            "name": "Kubernetes",
            "quadrant": "Platforms",
            "ring": "assess",
            "isNew": true,
            "description": "Kubernetes has become the default answer to the problem of deploying containers into a cluster of machines, which is becoming an increasingly common scenario."
        },
        {
            "name": "Azure PaaS",
            "quadrant": "Platforms",
            "ring": "adopt",
            "isNew": false,
            "description": "Azure Platform as a Service (PaaS). An increasingly broad set of platform services offered by Azure, where the underlying infrastructure and availability is managed by Microsoft and the consumer is only responsible for the design and configuration of the capabilities relevant to their requirements."
        },
        {
            "name": "Azure DevOps",
            "quadrant": "Platforms",
            "ring": "adopt",
            "isNew": false,
            "description": "Azure DevOps services contain a set of managed services, including hosted Git repos, CI/CD pipelines, automated testing tooling, backlog management tooling and artifact repository."
        },
        {
            "name": "CloudFlare",
            "quadrant": "Platforms",
            "ring": "trial",
            "isNew": true,
            "description": "Simple, cheap way to deploy personal projects."
        },


        {
            "name": "AsyncAPI",
            "quadrant": "Standards & Frameworks",
            "ring": "assess",
            "isNew": true,
            "description": "Hypothesis: API/design first possibilities applying to asynchronous communications (EDA)"
        },
        {
            "name": "CloudEvents",
            "quadrant": "Standards & Frameworks",
            "ring": "assess",
            "isNew": true,
            "description": "Hypothesis: Potentially enhance existing event structure to be CloudEvents compliant.<br/><br/>Note: D365 business events to Event Grid are already using this."
        },
        {
            "name": "OpenAPI",
            "quadrant": "Standards & Frameworks",
            "ring": "adopt",
            "isNew": false,
            "description": "Hypothesis: Industry and tooling support will allow a design first approach, while utilising machine readable API specifications through the entire lifecycle"
        },
        {
            "name": "AMQP",
            "quadrant": "Standards & Frameworks",
            "ring": "adopt",
            "isNew": false,
            "description": "Hypothesis: Provides some vendor/implementation independence from messaging platform, even if only for early development environments."
        },
        {
            "name": "GraphQL",
            "quadrant": "Standards & Frameworks",
            "ring": "assess",
            "isNew": true,
            "description": "Potential for 'Backends for Frontends' pattern and Experience APIs. Watch out for anti-pattern: Exposing Application Internal Structure/Logic"
        },
        {
            "name": "OData",
            "quadrant": "Standards & Frameworks",
            "ring": "trial",
            "isNew": false,
            "description": "Utilised by Dynamics 365 and SalesForce. Watch out for anti-pattern: Exposing Application Internal Structure/Logic"
        },
        {
            "name": "C4 Model",
            "quadrant": "Standards & Frameworks",
            "ring": "trial",
            "isNew": true,
            "description": "Hypothesis: The <a href=\"https://c4model.com\">C4 Model</a> is a relatively simple and flexible way to frame solutions. Using the top two layers (Context and Container) of the model should provide a useful way to explain integration architectures, and source data for an integration catalog, while still allowing programs and projects to choose their own architectural methods to use for managing the overall solution."
        },
        {
            "name": "APIOps Cycles",
            "quadrant": "Standards & Frameworks",
            "ring": "trial",
            "isNew": true,
            "description": "<a href=\"https://www.apiopscycles.com/the-method\">APIOps Cycles</a> is an open API method and set of templates used for managing API lifecycles. The API Canvas look to have great potential and have been utilised by various Australian companies (e.g. NAB)."
        }
    ]
}